{"version":3,"sources":["logo.jpg","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","useState","songs","setSongs","ref","firestore","collection","className","type","defaultValue","onClick","orderBy","onSnapshot","querySnapshot","items","forEach","doc","push","data","console","log","map","song","e","id","delete","catch","err","error","deleteSong","style","color","name","artist","songTitle","notes","moment","createdAt","toDate","calendar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAAe,I,aCabA,IAASC,cATY,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAKMP,QAAf,E,wBC+GaQ,MAtHf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBACA,GADA,UACkCA,mBAAS,KAA3C,mBACA,GADA,UAC4BA,mBAAS,KAArC,mBAA2C,GAA3C,UAAqEA,mBAAS,KAAnC,mBAC3C,GAD2C,UACjBA,oBAAS,IAAnC,mBACA,GADA,UAC4BA,oBAAS,IAArC,mBACA,GADA,UACoBA,mBAAS,KAA7B,mBAEMG,GAFN,UAEYZ,EAASa,YAAYC,WAAW,UA2D5C,OACE,qBAAKC,UAAU,MAAf,SAGE,sBAAKA,UAAU,OAAf,UAEE,uBACA,qBAAKA,UAAU,WACf,6CAIA,qBAAKA,UAAU,WACf,uBACA,wBAAQA,UAAU,WAAUC,KAAK,QAAQC,aAAa,QAASC,QAAS,WAzB5EN,EAAIO,QAAQ,YAAa,QAAQC,YAAW,SAACC,GAC3C,IAAMC,EAAQ,GACdD,EAAcE,SAAQ,SAACC,GACrBF,EAAMG,KAAKD,EAAIE,WAEjBf,EAASW,GACTK,QAAQC,IAAIlB,OAmBV,wBAIC,6BACAA,EAAMmB,KAAI,SAACC,GAAD,OAIX,qBAAKf,UAAU,WAAf,UAIE,sBAAMA,UAAW,SAAQG,QAAS,SAACa,GAAD,OAxD1C,SAAoBD,GAClBlB,EAAIY,IAAIM,EAAKE,IACZC,SACAC,OAAM,SAACC,GACNR,QAAQS,MAAMD,MAEhBvB,EAAIO,QAAQ,YAAa,QAAQC,YAAW,SAACC,GAC3C,IAAMC,EAAQ,GACdD,EAAcE,SAAQ,SAACC,GACrBF,EAAMG,KAAKD,EAAIE,WAEjBf,EAASW,GACTK,QAAQC,IAAIlB,MA4CiC2B,CAAWP,IAAOQ,MAAO,CAACC,MAAM,OAAzE,eACA,qEAAwCT,EAAKU,QAC7C,0CAAaV,EAAKW,UAClB,uCAAUX,EAAKY,aACf,wCAAWZ,EAAKa,SAChB,6BAAKC,IAAOd,EAAKe,UAAUC,UAAUC,aAEtC,yBAX8BjB,EAAKU,WAoBtC,6BC3GSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ce0b5678.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.001e1f8b.jpg\";","\r\n  import firebase from \"firebase/app\";\r\n  import \"firebase/firestore\";\r\n\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyAL3du6nMCQ0flZ1XzzVJIY0HR2cZbCNwQ\",\r\n    authDomain: \"goodbarkaraoke.firebaseapp.com\",\r\n    projectId: \"goodbarkaraoke\",\r\n    storageBucket: \"goodbarkaraoke.appspot.com\",\r\n    messagingSenderId: \"443669429939\",\r\n    appId: \"1:443669429939:web:28f5a2ae8bf660acdabac6\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport logo from './logo.jpg';\nimport firebase from \"./firebase.js\";\nimport \"firebase/firestore\";\nimport { v4 as uuidv4 } from 'uuid';\nimport moment from 'moment';\n\nfunction App() {\n  const [songs, setSongs] = useState([]);\n  const [name, setName] = useState([]);\n  const [songTitle, setSongTitle] = useState([]);\n  const [artist, setArtist] = useState([]);  const [notes, setNotes] = useState([]);\n  const [style, setStyle] = useState(false);\n  const [disBut, setDisBut] = useState(false);\n  const [id, setId] = useState([]);\n\n  const ref = firebase.firestore().collection(\"songs\");\n\n\n  function addSong(newSong) {\n    if (newSong.name.length < 2 || newSong.songTitle.length < 2 || newSong.artist.length < 2)\n    {\n      alert('Entries must be greater than 1 charachter')\n    }\n    else if (disBut === true) { \n      alert('Please wait 30 seconds before requesting another song. Please no more than 2-3 request per person on queue at a time')\n    }\n    else {\n     setDisBut(\n        true\n    );\n\n    // **** here's the timeout ****\n    setTimeout(() => setDisBut(false), 30000);\n    ref.doc(newSong.id)\n    .set(newSong)\n    .catch((err) => {\n      console.error(err)\n    })\n    alert('Request has been submitted and received by Miah and/or Mucks');\n    setSongTitle([''])\n\n  }\n\n  }\n\n  function deleteSong(song) {\n    ref.doc(song.id)\n    .delete()\n    .catch((err) => {\n      console.error(err)\n    })\n    ref.orderBy('createdAt', 'desc').onSnapshot((querySnapshot) => {\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push(doc.data())\n      })\n      setSongs(items)\n      console.log(songs)\n    })\n  }\n\n  \n  function adminP() {\n    ref.orderBy('createdAt', 'desc').onSnapshot((querySnapshot) => {\n      const items = [];\n      querySnapshot.forEach((doc) => {\n        items.push(doc.data())\n      })\n      setSongs(items)\n      console.log(songs)\n    })\n\n  }\n\n  return (\n    <div className=\"App\">\n\n       \n      <div className=\"info\">\n        \n        <br/>\n        <div className=\"divide\"></div>\n        <h1>Wazzz upppp</h1>\n\n    \n        \n        <div className=\"divide\"></div>\n        <br></br>\n        <button className=\"adminBut\"type=\"reset\" defaultValue=\"Reset\"  onClick={() => adminP()} >\n          Admin Only \n         </button>\n    \n         <ol>\n        {songs.map((song) => (\n    \n\n \n        <li  className=\"songcard\" key={song.name}>\n      \n   \n \n          <span className= 'spanX 'onClick={(e) => deleteSong(song)} style={{color:'red'} }>x</span>\n          <h2>Singer Name with last name inital: {song.name}</h2>\n          <h2>Artist: {song.artist}</h2>\n          <h2>Song:{song.songTitle}</h2>\n          <h2>Notes:{song.notes}</h2>\n          <h2>{moment(song.createdAt.toDate()).calendar()}</h2>\n     \n         <br></br>\n\n\n          </li>\n         \n       \n          \n      ))}\n      </ol>\n      <br></br> \n      \n      </div>   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}